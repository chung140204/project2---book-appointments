import React, { useState, useEffect, useMemo } from 'react';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment-timezone';
import 'moment/locale/vi';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import './AdminCalendar.css';
import './AdminInfoCard.css';
import { useOutletContext } from 'react-router-dom';

moment.locale('vi');
const localizer = momentLocalizer(moment);

const STATUS_LABELS = {
  all: 'T·∫•t c·∫£',
  pending: 'Ch·ªù x√°c nh·∫≠n',
  confirmed: 'ƒê√£ x√°c nh·∫≠n',
};
const STATUS_COLORS = {
  pending: '#ffb300',
  confirmed: '#1976d2',
};

const mockEvents = [
  {
    id: 1,
    title: 'Kh√°m rƒÉng - Nguy·ªÖn VƒÉn A',
    start: new Date(2024, 3, 11, 17, 40),
    end: new Date(2024, 3, 11, 18, 10),
    status: 'pending',
    customer: 'KH√ÅCH V√ÉNG LAI',
  },
  {
    id: 2,
    title: 'Kh√°m rƒÉng - Nguy·ªÖn VƒÉn B',
    start: new Date(2024, 3, 11, 17, 35),
    end: new Date(2024, 3, 11, 19, 35),
    status: 'pending',
    customer: 'KH√ÅCH V√ÉNG LAI',
  },
  {
    id: 3,
    title: 'Kh√°m rƒÉng - Nguy·ªÖn VƒÉn C',
    start: new Date(2024, 3, 11, 17, 40),
    end: new Date(2024, 3, 11, 19, 40),
    status: 'done',
    customer: 'KH√ÅCH V√ÉNG LAI',
  },
  {
    id: 4,
    title: 'T·∫©y tr·∫Øng - Tr·∫ßn Th·ªã B',
    start: new Date(2024, 3, 11, 17, 30),
    end: new Date(2024, 3, 11, 19, 30),
    status: 'doing',
    customer: 'Th√°i M·ªπ Trinh',
  },
  {
    id: 5,
    title: 'C·∫°o v√¥i - Hu·ª≥nh Ti·∫øt M·∫°n',
    start: new Date(2024, 3, 11, 16, 55),
    end: new Date(2024, 3, 11, 19, 5),
    status: 'done',
    customer: 'Hu·ª≥nh Ti·∫øt M·∫°n',
  },
  {
    id: 6,
    title: 'Nh·ªï rƒÉng - Ch·ªã M·∫´n',
    start: new Date(2024, 3, 11, 17, 10),
    end: new Date(2024, 3, 11, 19, 10),
    status: 'cancelled',
    customer: 'Ch·ªã M·∫´n',
  },
];

function isSameDay(d1, d2) {
  return (
    d1.getFullYear() === d2.getFullYear() &&
    d1.getMonth() === d2.getMonth() &&
    d1.getDate() === d2.getDate()
  );
}

const WORK_START = 8; // 8:00
const WORK_END = 17;  // 17:00

const AdminCalendar = () => {
  // Th√¥ng tin admin c·ª©ng
  const adminInfo = {
    name: "Admin L·ªãch H·∫πn",
    gmail: "admin@booking.com",
    phone: "0123456789",
    role: "admin"
  };
  const [events, setEvents] = useState([]);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [statusFilter, setStatusFilter] = useState('all');
  const [currentView, setCurrentView] = useState('month');

  useEffect(() => {
    fetch('http://localhost:5000/api/public-appointments')
      .then(res => res.json())
      .then(data => {
        console.log('API tr·∫£ v·ªÅ:', data.appointments);
        if (data.success) {
          setEvents(data.appointments.map(ev => {
            // X·ª≠ l√Ω date d·∫°ng ISO UTC
            const startMoment = moment.utc(ev.date).tz('Asia/Ho_Chi_Minh');
            const [h, m, s] = (ev.time || '08:00:00').split(':').map(Number);
            const start = new Date(
              startMoment.year(),
              startMoment.month(),
              startMoment.date(),
              h, m, s
            );
            const end = new Date(
              startMoment.year(),
              startMoment.month(),
              startMoment.date(),
              h + 1, 0, 0
            );
            if (isNaN(start.getTime()) || isNaN(end.getTime())) return null;
            return {
              ...ev,
              title: `${ev.service}${ev.name ? ' - ' + ev.name : ''}`,
              start,
              end,
              customer: ev.name,
              status: ev.status
            };
          }).filter(Boolean));
        }
      })
      .catch(err => console.error('Error fetching appointments:', err));
  }, []);

  // Danh s√°ch l·ªãch h·∫πn c·ªßa ng√†y ƒë∆∞·ª£c ch·ªçn
  const dayEvents = useMemo(() => {
    return events.filter(ev => isSameDay(ev.start, selectedDate));
  }, [events, selectedDate]);

  // ƒê·∫øm s·ªë l∆∞·ª£ng theo tr·∫°ng th√°i
  const statusCount = useMemo(() => {
    const count = { all: dayEvents.length };
    Object.keys(STATUS_LABELS).forEach(st => {
      if (st !== 'all') count[st] = dayEvents.filter(ev => ev.status === st).length;
    });
    return count;
  }, [dayEvents]);

  // Danh s√°ch hi·ªÉn th·ªã theo filter
  const filteredEvents = useMemo(() => {
    if (statusFilter === 'all') return dayEvents;
    return dayEvents.filter(ev => ev.status === statusFilter);
  }, [dayEvents, statusFilter]);

  // T·∫°o map ng√†y -> status
  const dayStatusMap = useMemo(() => {
    const map = {};
    events.forEach(ev => {
      const key = moment(ev.start).format('YYYY-MM-DD');
      // ∆Øu ti√™n pending > confirmed
      if (ev.status === 'pending') map[key] = 'pending';
      else if (ev.status === 'confirmed' && map[key] !== 'pending') map[key] = 'confirmed';
    });
    return map;
  }, [events]);

  // Custom m√†u cho t·ª´ng ng√†y
  const dayPropGetter = date => {
    const key = moment(date).format('YYYY-MM-DD');
    if (dayStatusMap[key] === 'pending') {
      return { style: { backgroundColor: '#ffecb3' } }; // v√†ng nh·∫°t
    }
    if (dayStatusMap[key] === 'confirmed') {
      return { style: { backgroundColor: '#bbdefb' } }; // xanh d∆∞∆°ng nh·∫°t
    }
    return {}; // ng√†y tr·ªëng
  };

  const eventStyleGetter = (event) => {
    let backgroundColor = '#3174ad';
    if (event.status === 'pending') backgroundColor = '#ffb300'; // v√†ng
    if (event.status === 'confirmed') backgroundColor = '#1976d2'; // xanh d∆∞∆°ng
    return {
      style: {
        backgroundColor,
        borderRadius: '4px',
        opacity: 0.8,
        color: 'white',
        border: '0px',
        display: 'block',
      },
    };
  };

  const EmptyEvent = () => <></>;

  return (
    <div className="admin-calendar-2col">
      {/* C·ªôt tr√°i: L·ªãch */}
      <div className="calendar-left">
        <Calendar
          localizer={localizer}
          events={events}
          startAccessor="start"
          endAccessor="end"
          style={{ height: 600 }}
          eventPropGetter={eventStyleGetter}
          dayPropGetter={dayPropGetter}
          views={['month', 'week', 'day']}
          defaultView="month"
          min={new Date(1970, 1, 1, WORK_START, 0)} // 8:00
          max={new Date(1970, 1, 1, WORK_END, 0)}   // 17:00
          messages={{
            next: "Ti·∫øp",
            previous: "Tr∆∞·ªõc",
            today: "H√¥m nay",
            month: "Th√°ng",
            week: "Tu·∫ßn",
            day: "Ng√†y"
          }}
          onSelectSlot={slot => setSelectedDate(slot.start)}
          selectable
          onSelectEvent={event => {
            setSelectedDate(event.start);
            setCurrentView('day');
          }}
          date={selectedDate}
          onNavigate={date => setSelectedDate(date)}
          onView={view => setCurrentView(view)}
          view={currentView}
          components={{
            event: currentView === 'week' ? EmptyEvent : undefined
          }}
        />
      </div>
      {/* C·ªôt ph·∫£i: Danh s√°ch l·ªãch h·∫πn */}
      <div className="calendar-right">
        <div className="calendar-right-header">
          <div className="calendar-right-title">
            L·ªäCH H·∫∏N NG√ÄY {moment(selectedDate).format('DD-MM-YYYY')}
          </div>
          <div className="calendar-status-filter">
            {Object.keys(STATUS_LABELS).map(st => (
              <button
                key={st}
                className={`status-filter-btn${statusFilter === st ? ' active' : ''}`}
                style={st !== 'all' ? { background: STATUS_COLORS[st], color: '#fff' } : {}}
                onClick={() => setStatusFilter(st)}
              >
                {STATUS_LABELS[st]}: {statusCount[st] || 0}
              </button>
            ))}
          </div>
        </div>
        <div className="calendar-right-list">
          {/* Kh√¥ng hi·ªÉn th·ªã b·∫£ng slot n·ªØa, ch·ªâ hi·ªÉn th·ªã l·ªãch react-big-calendar */}
          {/* C√°c event s·∫Ω ƒë∆∞·ª£c t√¥ m√†u theo tr·∫°ng th√°i nh·ªù eventStyleGetter */}
        </div>
        <div style={{ marginTop: 8 }}>
          <span style={{ background: '#ffecb3', padding: '2px 8px', borderRadius: 4, marginRight: 8 }}>Ch·ªù x√°c nh·∫≠n</span>
          <span style={{ background: '#bbdefb', padding: '2px 8px', borderRadius: 4, marginRight: 8 }}>ƒê√£ x√°c nh·∫≠n</span>
          <span style={{ border: '1px solid #ccc', padding: '2px 8px', borderRadius: 4 }}>Tr·ªëng</span>
          
        </div>
        <span style={{ float: 'right', marginTop: 8 }}>Th·ªùi gian l√†m vi·ªác: 8:00 - 17:00</span>
        <div style={{
          marginTop: 36,
          display: 'flex',
          justifyContent: 'center',
        }}>
          <div className="admin-info-card-container">
            <div className="admin-info-card">
              <div className="admin-info-card__icon">üë®‚Äçüíº</div>
              <div className="admin-info-card__name">{adminInfo.name}</div>
              <div className="admin-info-card__contact">{adminInfo.gmail}</div>
              <div className="admin-info-card__phone">{`SƒêT: ${adminInfo.phone}`}</div>
              <div className="admin-info-card__role">
                Vai tr√≤: <span>{adminInfo.role}</span>
              </div>
              <div className="admin-info-card__description">
                Qu·∫£n l√Ω, duy·ªát v√† theo d√µi t·∫•t c·∫£ l·ªãch h·∫πn c·ªßa h·ªá th·ªëng.<br/>
                H·ªó tr·ª£ ng∆∞·ªùi d√πng, ƒë·∫£m b·∫£o l·ªãch tr√¨nh ho·∫°t ƒë·ªông hi·ªáu qu·∫£.
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminCalendar; 